<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="   
            http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans.xsd   
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop.xsd   
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx.xsd 
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 1. 扫描 业务逻辑和 dao 中的注解 -->
	<context:component-scan base-package="com.bdqn" />

	<!-- 2. 读取数据库配置文件 -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath:db.properties" />

	<!-- 3. JNDI获取数据源(使用dbcp连接池) -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close" scope="singleton">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${user}" />
		<property name="password" value="${password}" />
		<property name="connectionProperties" value="${connectionProperties}" />

		<!-- Connection Pooling Info -->
		<!-- 连接池启动时创建的初始化连接数量 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制 
			（默认为8个，maxIdle不能设置 太小，因为假如在高负载的情况下，连接的打开时间比关闭的时间快， 
			会引起连接池中idle的个数上升超过maxIdle，而造成频繁的连接销毁>和创建，类似于jvm参数中的Xmx设置) -->
		<property name="maxIdle" value="${maxIdle}" />
		<!-- 连接池中最小的空闲的连接数，低于这个数量会被创建新的连接 （默认为0，调整为5，该参数越接近maxIdle，性能越>好，因为连接的创建和销毁，都是需要消耗资源的； 
			但是不能太大，因为在机器很空闲的时候，也会创建低于minidle个数的连接，类似于jvm>参数中的Xmn设置） -->
		<property name="minIdle" value="${minIdle}" />
		<!--最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无>限等待（默认为无限，调整为60000ms，避免因线程池不够用，而导致请求被无限制挂起） -->
        <property name="maxWaitMillis" value="${maxWaitMillis}" />

		<!-- sql 心跳包 -->
		<!-- GenericObjectPool中针对pool管理，起了一个Evict的TimerTask定时线程进行控制 (可通过设置参数timeBetweenEvictionRunsMillis>0),定时对线程池中的链接进行validateObject校验， 
			对无效的链接进行关闭后，会调用ensureMinIdle，适当建立链接保证最小的minIdle连接数。 -->
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<!-- 对拿到的connection进行validateObject校验 -->
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />

		<!-- 设置的Evict线程的时间，单位ms，大于0才会开启evict检查线程 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 代表每次检查链接的数量，建议设置和maxActive一样大，这样每次可以有效检查所有的链接. -->
		<property name="numTestsPerEvictionRun" value="${maxActive}" />
		<!-- 验证连接是否可用sql -->
		<property name="validationQuery" value="${validationQuery}" />
		<!--超过时间限制，回收没有用(废弃)的连接（默认为 300秒，调整为180） -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
	</bean>

	<!-- 4. 配置mybitas SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>

	<!-- 5. 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- AOP 事务处理 开始 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="login*" propagation="REQUIRED" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="register*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* com.bdqn.biz..*.*(..))" id="bizMethod" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="bizMethod" />
	</aop:config>
	<!-- AOP 事务处理 结束 -->

	<!-- 6. 扫描 sql 映射文件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.bdqn.dao" />
	</bean>
</beans>


